Submission: Graphing Dino Fun World Assignment
Assignment Description
Impressed by your previous work, the administrators of Dino Fun World have asked you to create some charts that they can use in their next presentation to upper management. The data used for this assignment will be the same as the data used for the previous assignment.
The administrators would like you to create four graphs:
Graph 1: A pie chart depicting visits to thrill ride attractions.
Graph 2: A bar chart depicting total visits to food stalls.
Graph 3: A line chart depicting attendance at the newest ride, Atmosfear over the course of the day.
Graph 4: A box-and-whisker plot depicting total visits to the park's Kiddie Rides.

Directions
The database provided by the park administration is formatted to be readable by any SQL database library. The course staff recommends the sqlite3 library. The database contains three tables, named checkin, attractions, and sequences. The database file is named 'dinofunworld.db' and is available in the '/course/data/CSE-578/dinofunworld.db' path.
Note: Please note that the database file is accessible through the learner submission workspace, which requires establishing a connection with the database. For downloading the dataset and potentially working locally, refer to the overview document page.
The information contained in each of these tables is listed below:

checkin: - The check-in data for all visitors for the day in the park. The data includes two types of check-ins: inferred and actual checkins.  

                              - Fields: visitorID, timestamp, attraction, duration, type 
 attraction: - The attractions in the park by their corresponding AttractionID, Name, Region, Category, and type. Regions are from the VAST Challenge map such as Coaster Alley, Tundra Land, etc. Categories include Thrill rides, Kiddie Rides, etc. Type is broken into Outdoor Coaster, Other Ride, Carousel, etc. 

                              - Fields: AttractionID, Name, Region, Category, type
 sequences: - The check-in sequences of visitors. These sequences list the position of each visitor to the park every five minutes. If the visitor has not entered the part yet, the sequence has a value of 0 for that time interval. If the visitor is in the park, the sequence lists the attraction they have most recently checked in to until they check in to a new one or leave the park. 

                               - Fields: visitorID, sequence
Using the provided data, create the four visualizations that the administration requested: the pie chart, bar chart, line chart, and box-and-whisker plot.
Submission Directions for Assignment Deliverables
This assignment will be auto-graded. You must complete and submit your work through Ed Lesson’s code challenge to receive credit for the course:

1. In order for your answers to be correctly registered in the system, you must place the code for your answers in the cell indicated for each question. 
You should submit the assignment with the output of the code in the cell's display area. The display area should contain only your answer to the question with no extraneous information, or else the answer may not be picked up correctly. 
Each cell that is going to be graded has a set of comment lines (ex: ### TEST FUNCTION: test_question1) at the beginning of the cell. This line is extremely important and must not be modified or removed.
2. After completing the notebook, run each code cell individually or click “Run All” at the top to print the outputs.
3. When you are ready to submit your completed work, click on “Mark” at the bottom right of the screen. 
4. You will know you have successfully completed the assignment when feedback appears for each test case with a score.
5. If needed: to resubmit the assignment in Ed Lesson 

Edit your work in the notebook
Run the code cells again
Click “Mark” at the bottom of the screen 
Your submission will be reviewed by the course team and then, after the due date has passed, your score will be populated from Ed Lesson into your Canvas grade.

Evaluation
There are four parts in the grading, and each part has one test case where the total number of points for all parts is 50. If the submission is correct, you will see "The data used for the chart is correct. The plot is a valid chart." with scores for each part. If your output data is correct but the graph is not, you will receive a partial score. The auto-grader first validates your output data, and if it is correct, it proceeds to evaluate the correctness of the graph. If the submission fails, the grader will return the corresponding error messages. 

Common Errors
PNG Plot not found: Add %matplotlib inline in your cell.
The plot generated is not a valid chart: Ensure your chart has all the specified parameters in the right format as outlined in each question.
Note: To achieve better scores, consider following the Jupyter Notebook Demonstration titled "Introduction to Statistical Graphics Reading or Video"
Please execute each cell in the Notebook before submitting.


Add your import statements and the database connection statements in the below code block
Database file path = '/course/data/CSE-578/dinofunworld.db'

[1] #your code here
#your code here
import sqlite3
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import math
from datetime import timedelta

# Establish the connection to the database
db_file_path = '/course/data/CSE-578/dinofunworld.db'
conn = sqlite3.connect(db_file_path)
cursor = conn.cursor()

Question 1 :
Make a Pie Chart of the visits to Thrill Ride attractions.
Note:
For this question, display the pie chart in the notebook and print the data used to create the pie chart as a list of lists (ex: [['Ride 1', 10], ['Ride 2', 100], ...])
The pie chart must have the below mentioned parameters,
labels
title named 'Visits to Thrill Ride attractions'
label with one decimal value inside wedges
set aspect ratio of the plot to 'equal'.
The plot must not have the following parameters,
legend
do not set figure size
do not set font size or font-weight for titles and labels

[2] ### TEST FUNCTION: test_question1
# DO NOT REMOVE OR MODIFY THE ABOVE LINE
# your code here
cursor.execute("SELECT attraction.Name, count(checkin.visitorId) as c \
            FROM checkin LEFT JOIN attraction ON checkin.attraction = attraction.AttractionID \
            WHERE LOWER(attraction.Category) LIKE '%thrill%' \
            GROUP BY attraction.Name \
            ORDER BY c;")
count_visits = cursor.fetchall()
visit_stats = pd.DataFrame.from_records(count_visits, columns=['RideName', 'VisitCount'])
plt.pie(visit_stats['VisitCount'], labels=visit_stats['RideName'], autopct='%0.2f%%', shadow=False)
plt.axis('equal')
plt.title('Visits to Thrill Ride attractions')
plt.show()
print(visit_stats.values.tolist())

Question 2 :
Make a bar chart of total visits to food stalls.
Note:
Please query attractions with category equal to "Food" and order by number of visits.
For this question, display the bar chart in the notebook and print the data used to create the bar chart as a list of lists (ex: [['Stall 1', 10], ['Stall 2', 50], ...])
The bar chart should be a vertical bar plot and must have the specified parameters listed below,
Set x-axis to food stalls, labeling each food stall with names rotated at a 45-degree angle and right horizontal alignment. Set y-axis to number of visits.
x-label ('Food Stalls') and y-label ('Number of Visits')
title named 'Total Visits to Food Stalls'
The plot must not have the following parameters,
legend
do not set figure size
do not set font size or font-weight for titles and labels

[3] ### TEST FUNCTION: test_question2
# DO NOT REMOVE OR MODIFY THE ABOVE LINE
# your code here
cursor.execute("""
    SELECT attraction.Name, count(checkin.visitorId) as c
    FROM checkin 
    LEFT JOIN attraction ON checkin.attraction = attraction.AttractionID
    WHERE LOWER(attraction.Category) LIKE '%food%'
    GROUP BY attraction.Name
    ORDER BY c;
""")
count_visits = cursor.fetchall()
visit_stats = pd.DataFrame.from_records(count_visits, columns=['FoodStallName', 'VisitCount'])

# Create the bar chart
plt.bar(range(len(visit_stats['FoodStallName'])), visit_stats['VisitCount'])
plt.ylabel('Number of Visits')
plt.xlabel('Food Stalls')
plt.xticks(
    range(len(visit_stats['FoodStallName'])),
    visit_stats['FoodStallName'],
    rotation=45,  # Rotate x-axis labels by 45 degrees
    ha='right'  # Right horizontal alignment for labels
)
plt.title('Total Visits to Food Stalls')
plt.show()

# Print the data as a list of lists
print(visit_stats.values.tolist())


Question 3 :
Make a line chart of attendance at Atmosfear every five minutes.
Note:
For this question, use data from the table "sequences". You can assume that all activity sequences are aligned by time (i.e., the first node of all sequences occurred at the same time) and are of the same length.
You only need to consider the first 16 hours of records in the sequences, which is considered the open hours of the park in one day. Specifically, because an activity sequence from the "sequences" table was updated/recorded every 5 minutes, you need to extract the first 192 items (16h * 60m / 5m = 192).
Display the line chart in the notebook and print the data used to create the chart as a list of lists or tuple lists
The first item in the list is irrelevant, but you can put in some meaningful information and it should be integer.The second item is the count of visits at that moment. For example, your output should look like this (in Python syntax; not relevant to the correct answer): [ (0, 0), (1, 7), (2, 3), …, (190, 4), (191, 5) ].
The line chart must have the specified parameters listed below,
Set x-axis to the first element in your output list and y-axis to the second item in the list (number of visits)
x-label ('Time in minutes') and y-label ('Number of visits')
title named 'Attendance at Atmosfear every 5 minutes'
The plot must not have the following parameters,
legend
do not set figure size
do not set font size or font-weight for titles and labels

[4] ### TEST FUNCTION: test_question3
# DO NOT REMOVE OR MODIFY THE ABOVE LINE
# your code here
import sqlite3
import matplotlib.pyplot as plt

# Connect to the database
conn = sqlite3.connect('/course/data/CSE-578/dinofunworld.db')

# Fetch the AttractionID for 'Atmosfear'
cursor.execute("SELECT attractionId FROM attraction WHERE Name = 'Atmosfear';")
attractionID = cursor.fetchone()[0]

# Query the database to extract sequences for all visitors and calculate attendance at Atmosfear
cursor.execute("""
    SELECT sequence
    FROM sequences
    WHERE sequence LIKE ?
""", ('%' + str(attractionID) + '%',))

# Fetch all sequences for visitors who went on Atmosfear
sequences = cursor.fetchall()

# Calculate attendance counts at each 5-minute interval for the first 192 intervals
attendance_data = []
for i in range(192):  # 16 hours * 12 (5-minute intervals per hour)
    count = sum(1 for seq in sequences if str(attractionID) in seq[0].split('-')[i:i+1])
    attendance_data.append((i * 5, count))  # Store time interval in minutes and corresponding count

# Close the database connection
conn.close()

# Create a line chart
x, y = zip(*attendance_data)
plt.plot(x, y)
plt.xlabel('Time in minutes')
plt.ylabel('Number of visits')
plt.title('Attendance at Atmosfear every 5 minutes')

# Display the line chart
plt.show()

# Print the data used for the line chart
print(attendance_data)



Question 4:
Make a box plot of total visits to rides in the Kiddie Rides category.
Note:
The to-be-printed data list must be ordered by AttractionID (a field in the table "attraction").
For this question, display the box plot in the notebook and print the number of visits to each ride as a list (ex: [3, 4, 5, 6, ...])
The boxplot chart must have the specified parameters listed below,
Set x-axis to Attraction and y-axis to number of visits to each ride.
x-label ('Attraction') and y-label ('Visitor Count')
title named 'Total visits to rides in the Kiddie Rides category'
The plot must not have the following parameters,
legend
do not set figure size
do not set font size or font-weight for titles and labels

[5] ### TEST FUNCTION: test_question4
# DO NOT REMOVE OR MODIFY THE ABOVE LINE
# your code here
cursor.execute("SELECT attraction.Name, count(checkin.visitorId) as c \
            FROM checkin LEFT JOIN attraction ON checkin.attraction = attraction.AttractionID \
            WHERE LOWER(attraction.Category) LIKE '%kiddie%' \
            GROUP BY attraction.Name \
            ORDER BY c;")
count_visits = cursor.fetchall()
visit_stats = pd.DataFrame.from_records(count_visits, columns=['KiddieRideName', 'VisitCount'])
plt.boxplot(visit_stats['VisitCount'])
plt.xlabel('Attraction')
plt.ylabel('Visitor Count')
plt.title('Total visits to rides in the Kiddie Rides category')
plt.show()
print(visit_stats['VisitCount'].values.tolist())